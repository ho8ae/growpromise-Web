import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router } from 'react-router-dom';

// Ïª¥Ìè¨ÎÑåÌä∏ ÏûÑÌè¨Ìä∏
import GrowPromiseLanding from './components/GrowPromiseLanding';
import { preloadModel } from './components/WorkingGLTFModel';

// Î°úÎî© Ïª¥Ìè¨ÎÑåÌä∏
const LoadingScreen = ({ progress = 0 }) => (
  <div className="fixed inset-0 bg-gradient-to-br from-green-400 to-emerald-500 flex items-center justify-center z-50">
    <div className="text-center text-white">
      <div className="w-20 h-20 bg-white bg-opacity-20 rounded-full mx-auto mb-4 flex items-center justify-center animate-pulse">
        <img
          src="/logo/promise-icon.png"
          alt="logo"
          className="w-12 h-12"
        />
      </div>
      <h2 className="text-2xl font-bold mb-2 font-['CookieRun-Regular']">Ïë•Ïë•ÏïΩÏÜç</h2>
      <p className="text-lg opacity-80 font-['CookieRun-Regular']">
        Î°úÎî© Ï§ë... {Math.round(progress)}%
      </p>
      {/* ÏßÑÌñâÎ•† Î∞î */}
      <div className="w-48 h-2 bg-white bg-opacity-20 rounded-full mx-auto mt-4 overflow-hidden">
        <div 
          className="h-full bg-white transition-all duration-300 ease-out"
          style={{ width: `${progress}%` }}
        />
      </div>
    </div>
  </div>
);

function App() {
  const [isLoaded, setIsLoaded] = useState(false);
  const [loadingProgress, setLoadingProgress] = useState(0);

  useEffect(() => {
    const loadAssets = async () => {
      console.log('üöÄ Starting asset loading...');
      
      try {
        // 1Îã®Í≥Ñ: DOM Ï§ÄÎπÑ ÌôïÏù∏ (25%)
        setLoadingProgress(25);
        await new Promise(resolve => setTimeout(resolve, 500));

        // 2Îã®Í≥Ñ: Ïù¥ÎØ∏ÏßÄ ÌîÑÎ¶¨Î°úÎìú (50%)
        const imagePromises = [
          '/logo/promise-icon.png',
          '/Download_on_the_App_Store_Badge_KR_RGB_blk_100317.svg',
          '/GetItOnGooglePlay_Badge_Web_color_Korean.png'
        ].map(src => {
          return new Promise((resolve, reject) => {
            const img = new Image();
            img.onload = resolve;
            img.onerror = reject;
            img.src = src;
          });
        });

        await Promise.all(imagePromises);
        setLoadingProgress(50);
        console.log('‚úÖ Images loaded');
        
        // 3Îã®Í≥Ñ: 3D Î™®Îç∏ ÌîÑÎ¶¨Î°úÎìú (75%)
        try {
          preloadModel('/models/growpromise_iphone3D.glb');
          console.log('‚úÖ 3D model preloaded');
        } catch (error) {
          console.warn('‚ö†Ô∏è Model preload failed:', error);
        }
        setLoadingProgress(75);
        
        // 4Îã®Í≥Ñ: Ï∂îÍ∞Ä ÏïàÏ†ïÌôî ÏãúÍ∞Ñ - Ïù¥Í≤å ÌïµÏã¨! (100%)
        console.log('‚è≥ Waiting for full stabilization...');
        await new Promise(resolve => setTimeout(resolve, 2000)); // 2Ï¥à Ï∂îÍ∞Ä ÎåÄÍ∏∞
        setLoadingProgress(90);
        
        // 5Îã®Í≥Ñ: ÏµúÏ¢Ö Ï§ÄÎπÑ
        await new Promise(resolve => setTimeout(resolve, 500));
        setLoadingProgress(100);
        
        // ÎßàÏßÄÎßâ fade-out Ìö®Í≥ºÎ•º ÏúÑÌïú ÏßßÏùÄ ÏßÄÏó∞
        setTimeout(() => {
          console.log('‚úÖ All ready, showing app!');
          setIsLoaded(true);
        }, 200);
        
      } catch (error) {
        console.error('‚ùå Asset loading failed:', error);
        // ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï¥ÎèÑ Ï∂©Î∂ÑÌûà Í∏∞Îã§Î¶∞ ÌõÑ Ïï± Ïã§Ìñâ
        await new Promise(resolve => setTimeout(resolve, 1000));
        setIsLoaded(true);
      }
    };

    loadAssets();
  }, []);

  // ÎîîÎ≤ÑÍπÖÏö© ÌôòÍ≤Ω Ï†ïÎ≥¥
  useEffect(() => {
    console.log('=== Environment Info ===');
    console.log('URL:', window.location.href);
    console.log('Screen:', window.innerWidth, 'x', window.innerHeight);
    console.log('Device pixel ratio:', window.devicePixelRatio);
  }, []);

  if (!isLoaded) {
    return <LoadingScreen progress={loadingProgress} />;
  }
 
  return (
    <Router>
      <div className="font-sans text-gray-800 overflow-x-hidden">
        <GrowPromiseLanding />
      </div>
    </Router>
  );
}

export default App;